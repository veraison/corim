// Copyright 2023-2024 Contributors to the Veraison project.
// SPDX-License-Identifier: Apache-2.0

package comid

import (
	"crypto"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/veraison/swid"
)

func Test_CryptoKey_NewPKIXBase64Key(t *testing.T) {
	key, err := NewPKIXBase64Key(TestECPubKey)
	require.NoError(t, err)
	assert.Equal(t, TestECPubKey, key.String())
	pub, err := key.PublicKey()
	assert.NoError(t, err)
	assert.NotNil(t, pub)

	_, err = NewPKIXBase64Key("")
	assert.EqualError(t, err, "key value not set")

	noPem := "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEW1BvqF+/ry8BWa7ZEMU1xYYHEQ8BlLT4MFHOaO+ICTtIvrEeEpr/sfTAP66H2hCHdb5HEXKtRKod6QLcOLPA1Q=="
	_, err = NewPKIXBase64Key(noPem)
	assert.EqualError(t, err, "could not decode PEM block")

	badBlock := "-----BEGIN CERTIFICATE-----\nDEADBEEF\n-----END CERTIFICATE-----"
	_, err = NewPKIXBase64Key(badBlock)
	assert.Contains(t, err.Error(), "unexpected PEM block type")

	badKey := "-----BEGIN PUBLIC KEY-----\nDEADBEEF\n-----END PUBLIC KEY-----"
	_, err = NewPKIXBase64Key(badKey)
	assert.Contains(t, err.Error(), "unable to parse public key")

	key = MustNewPKIXBase64Key(TestECPubKey)
	assert.Equal(t, TestECPubKey, key.String())

	assert.Panics(t, func() {
		MustNewPKIXBase64Key(badBlock)
	})
}

func Test_CryptoKey_NewPKIXBase64Cert(t *testing.T) {
	cert, err := NewPKIXBase64Cert(TestCert)
	require.NoError(t, err)
	assert.Equal(t, TestCert, cert.String())
	pub, err := cert.PublicKey()
	assert.NoError(t, err)
	assert.NotNil(t, pub)

	_, err = NewPKIXBase64Cert("")
	assert.EqualError(t, err, "cert value not set")

	noPem := "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEW1BvqF+/ry8BWa7ZEMU1xYYHEQ8BlLT4MFHOaO+ICTtIvrEeEpr/sfTAP66H2hCHdb5HEXKtRKod6QLcOLPA1Q=="
	_, err = NewPKIXBase64Cert(noPem)
	assert.EqualError(t, err, "could not decode PEM block")

	badBlock := "-----BEGIN PUBLIC KEY-----\nDEADBEEF\n-----END PUBLIC KEY-----"
	_, err = NewPKIXBase64Cert(badBlock)
	assert.Contains(t, err.Error(), "unexpected PEM block type")

	badCert := "-----BEGIN CERTIFICATE-----\nDEADBEEF\n-----END CERTIFICATE-----"
	_, err = NewPKIXBase64Cert(badCert)
	assert.Contains(t, err.Error(), "could not parse x509 cert")

	cert = MustNewPKIXBase64Cert(TestCert)
	assert.Equal(t, TestCert, cert.String())

	assert.Panics(t, func() {
		MustNewPKIXBase64Cert(badBlock)
	})
}

func Test_CryptoKey_NewPKIXBase64CertPath(t *testing.T) {
	certs, err := NewPKIXBase64CertPath(TestCertPath)
	assert.NoError(t, err)
	assert.Equal(t, TestCertPath, certs.String())
	pub, err := certs.PublicKey()
	assert.NoError(t, err)
	assert.NotNil(t, pub)

	_, err = NewPKIXBase64CertPath("")
	assert.EqualError(t, err, "cert value not set")

	noPem := "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEW1BvqF+/ry8BWa7ZEMU1xYYHEQ8BlLT4MFHOaO+ICTtIvrEeEpr/sfTAP66H2hCHdb5HEXKtRKod6QLcOLPA1Q=="
	_, err = NewPKIXBase64CertPath(noPem)
	assert.EqualError(t, err, "could not decode PEM block 0")

	badBlock := "-----BEGIN PUBLIC KEY-----\nDEADBEEF\n-----END PUBLIC KEY-----"
	_, err = NewPKIXBase64CertPath(badBlock)
	assert.Contains(t, err.Error(), "unexpected type for PEM block 0")

	badCert := "-----BEGIN CERTIFICATE-----\nDEADBEEF\n-----END CERTIFICATE-----"
	_, err = NewPKIXBase64CertPath(badCert)
	assert.Contains(t, err.Error(), "could not parse x509 cert in PEM block 0")

	certs = MustNewPKIXBase64CertPath(TestCertPath)
	assert.Equal(t, TestCertPath, certs.String())

	assert.Panics(t, func() {
		MustNewPKIXBase64CertPath(badBlock)
	})
}

func Test_CryptoKey_NewCOSEKey(t *testing.T) {
	key, err := NewCOSEKey(TestCOSEKey)
	require.NoError(t, err)
	assert.Equal(t, base64.StdEncoding.EncodeToString(TestCOSEKey), key.String())
	pub, err := key.PublicKey()
	assert.NoError(t, err)
	assert.NotNil(t, pub)

	_, err = NewCOSEKey([]byte{})
	assert.EqualError(t, err, "empty COSE_Key bytes")

	_, err = NewCOSEKey([]byte("DEADBEEF"))
	assert.Contains(t, err.Error(), "cbor: 3 bytes of extraneous data starting at index 5")

	badKey := []byte{ // taken from go-cose unit tests
		0xa2,       // map(2)
		0x01, 0x01, // kty: OKP
		0x03, 0x41, 0x01, // alg: bstr(1)
	}
	_, err = NewCOSEKey(badKey)
	assert.Contains(t, err.Error(), "invalid algorithm value")

	keySet, err := NewCOSEKey(TestCOSEKeySetOne)
	require.NoError(t, err)
	pub, err = keySet.PublicKey()
	assert.NoError(t, err)
	assert.NotNil(t, pub)

	keySet, err = NewCOSEKey(TestCOSEKeySetMulti)
	require.NoError(t, err)
	_, err = keySet.PublicKey()
	assert.Contains(t, err.Error(), "COSE_KeySet contains more than one key")

	key = MustNewCOSEKey(TestCOSEKey)
	assert.Equal(t, base64.StdEncoding.EncodeToString(TestCOSEKey), key.String())

	assert.Panics(t, func() {
		MustNewCOSEKey(badKey)
	})
}

func Test_CryptoKey_NewThumbprint(t *testing.T) {
	type newKeyFunc func(any) (*CryptoKey, error)

	for _, newFunc := range []newKeyFunc{
		NewThumbprint,
		NewCertThumbprint,
		NewCertPathThumbprint,
	} {
		key, err := newFunc(TestThumbprint)
		require.NoError(t, err)
		assert.Equal(t, TestThumbprint.String(), key.String())
		_, err = key.PublicKey()
		assert.EqualError(t, err, "cannot get PublicKey from a digest")

		badAlg := swid.HashEntry{
			HashAlgID: 99,
			HashValue: MustHexDecode(nil, `deadbeef`),
		}
		_, err = newFunc(badAlg)
		assert.Contains(t, err.Error(), "unknown hash algorithm 99")

		badHash := swid.HashEntry{
			HashAlgID: 1,
			HashValue: MustHexDecode(nil, `deadbeef`),
		}
		_, err = newFunc(badHash)
		assert.Contains(t, err.Error(), "length mismatch for hash algorithm")
	}

	type mustNewKeyFunc func(any) *CryptoKey

	for _, mustNewFunc := range []mustNewKeyFunc{
		MustNewThumbprint,
		MustNewCertThumbprint,
		MustNewCertPathThumbprint,
	} {
		key := mustNewFunc(TestThumbprint)
		assert.Equal(t, TestThumbprint.String(), key.String())

		assert.Panics(t, func() {
			mustNewFunc(swid.HashEntry{})
		})
	}
}

func Test_CryptoKey_NewTaggedBytes(t *testing.T) {
	key, err := NewCryptoKeyTaggedBytes(TestTaggedBytes)
	require.NoError(t, err)
	assert.Equal(t, string(TestTaggedBytes), key.String())
	_, err = key.PublicKey()
	assert.EqualError(t, err, "cannot get PublicKey from bytes")
}

func Test_CryptoKey_JSON_roundtrip(t *testing.T) {
	for _, tv := range []struct {
		Type string
		In   any
		Out  string
	}{
		{
			Type: BytesType,
			In:   TestTaggedBytes,
			Out:  string(TestTaggedBytes),
		},
		{
			Type: PKIXBase64KeyType,
			In:   TestECPubKey,
			Out:  TestECPubKey,
		},
		{
			Type: PKIXBase64CertType,
			In:   TestCert,
			Out:  TestCert,
		},
		{
			Type: PKIXBase64CertPathType,
			In:   TestCertPath,
			Out:  TestCertPath,
		},
		{
			Type: COSEKeyType,
			In:   TestCOSEKey,
			Out:  base64.StdEncoding.EncodeToString(TestCOSEKey),
		},
		{
			Type: ThumbprintType,
			In:   TestThumbprint,
			Out: fmt.Sprintf("%s;%s",
				TestThumbprint.AlgIDToString(),
				base64.StdEncoding.EncodeToString(TestThumbprint.HashValue),
			),
		},
		{
			Type: CertThumbprintType,
			In:   TestThumbprint,
			Out: fmt.Sprintf("%s;%s",
				TestThumbprint.AlgIDToString(),
				base64.StdEncoding.EncodeToString(TestThumbprint.HashValue),
			),
		},
		{
			Type: CertPathThumbprintType,
			In:   TestThumbprint,
			Out: fmt.Sprintf("%s;%s",
				TestThumbprint.AlgIDToString(),
				base64.StdEncoding.EncodeToString(TestThumbprint.HashValue),
			),
		},
	} {
		key := MustNewCryptoKey(tv.In, tv.Type)
		data, err := json.Marshal(key)
		require.NoError(t, err)

		expected := fmt.Sprintf(`{"type": %q, "value": %q}`, tv.Type, tv.Out)
		assert.JSONEq(t, expected, string(data))

		var key2 CryptoKey
		err = json.Unmarshal(data, &key2)
		require.NoError(t, err)
		assert.Equal(t, *key, key2)
	}
}

func Test_CryptoKey_UnmarshalJSON_negative(t *testing.T) {
	var key CryptoKey

	for _, tv := range []struct {
		Val    string
		ErrMsg string
	}{
		{
			Val:    `{"type": "bytes", "value": 1}`,
			ErrMsg: "json: cannot unmarshal",
		},
		{
			Val:    `@@`,
			ErrMsg: "invalid character",
		},
		{
			Val:    `{"value":"deadbeef"}`,
			ErrMsg: "type not set",
		},
		{
			Val:    `{"type": "cose-key", "value":";;;"}`,
			ErrMsg: "base64 decode error",
		},
		{
			Val:    `{"type": "thumbprint", "value":"deadbeef"}`,
			ErrMsg: "swid.HashEntry decode error",
		},
		{
			Val:    `{"type": "random-key", "value":"deadbeef"}`,
			ErrMsg: "unexpected ICryptoKeyValue type",
		},
	} {
		err := key.UnmarshalJSON([]byte(tv.Val))
		assert.ErrorContains(t, err, tv.ErrMsg)
	}
}

func Test_CryptoKey_CBOR_roundtrip(t *testing.T) {
	for _, tv := range []struct {
		Type string
		In   any
		Out  string
	}{
		{
			Type: BytesType,
			In:   TestTaggedBytes,
			Out:  "d902304b7461676765646279746573",
		},
		{
			Type: PKIXBase64KeyType,
			In:   TestECPubKey,
			Out:  "d9022a78b12d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a304441516344516741455731427671462b2f727938425761375a454d553178595948455138420a6c4c54344d46484f614f2b4943547449767245654570722f7366544150363648326843486462354845584b74524b6f6436514c634f4c504131513d3d0a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d",
		},
		{
			Type: PKIXBase64CertType,
			In:   TestCert,
			Out:  "d9022b7902c82d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949423454434341596567417749424167495547687241394d337951494671636b413276366e5165776d4633304977436759494b6f5a497a6a3045417749770a5254454c4d416b474131554542684d4351565578457a415242674e564241674d436c4e766257557455335268644755784954416642674e5642416f4d47456c750a64475679626d5630494664705a47647064484d6755485235494578305a444167467730794d7a41354d4451784d5441784e446861474138794d4455784d4445780a4f5445784d4445304f466f775254454c4d416b474131554542684d4351565578457a415242674e564241674d436c4e76625755745533526864475578495441660a42674e5642416f4d47456c7564475679626d5630494664705a47647064484d6755485235494578305a44425a4d424d4742797147534d343941674547434371470a534d3439417745484130494142467451623668667636387641566d75325244464e63574742784550415a53302b4442527a6d6a7669416b37534c367848684b610a2f37483077442b7568396f516833572b527846797255537148656b433344697a774e576a557a42524d423047413155644467515742425157704e5062366557440a534d2f2b6a7770627a6f4f33694867344c54416642674e5648534d454744415767425157704e506236655744534d2f2b6a7770627a6f4f33694867344c5441500a42674e5648524d4241663845425441444151482f4d416f4743437147534d343942414d43413067414d455543494161794e49463065434a445a6d637271526a480a663968384778654944556e4c716c646549764e66612b39534169454139554c4254506a6e545568596c653232364f416a67327364686b587462334d75304530460a6e75556d7349513d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d",
		},
		{
			Type: PKIXBase64CertPathType,
			In:   TestCertPath,
			Out:  "",
		},
		{
			Type: COSEKeyType,
			In:   TestCOSEKey,
			Out:  "d9022ea501020258246d65726961646f632e6272616e64796275636b406275636b6c616e642e6578616d706c65200121582065eda5a12577c2bae829437fe338701a10aaa375e1bb5b5de108de439c08551d2258201e52ed75701163f7f9e40ddf9f341b3dc9ba860af7e0ca7ca7e9eecd0084d19c",
		},
		{
			Type: ThumbprintType,
			In:   TestThumbprint,
			Out:  "d9022d8201582068e656b251e67e8358bef8483ab0d51c6619f3e7a1a9f0e75838d41ff368f728",
		},
		{
			Type: CertThumbprintType,
			In:   TestThumbprint,
			Out:  "d9022f8201582068e656b251e67e8358bef8483ab0d51c6619f3e7a1a9f0e75838d41ff368f728",
		},
		{
			Type: CertPathThumbprintType,
			In:   TestThumbprint,
			Out:  "d902318201582068e656b251e67e8358bef8483ab0d51c6619f3e7a1a9f0e75838d41ff368f728",
		},
	} {
		key := MustNewCryptoKey(tv.In, tv.Type)
		data, err := em.Marshal(key)
		require.NoError(t, err)

		expected := MustHexDecode(t, tv.Out)
		assert.Equal(t, expected, data)

		var key2 CryptoKey
		err = dm.Unmarshal(data, &key2)
		require.NoError(t, err)
		assert.Equal(t, key.String(), key2.String())
	}
}

func Test_NewCryptoKey_negative(t *testing.T) {
	for _, tv := range []struct {
		Type   string
		In     any
		ErrMsg string
	}{
		{
			Type:   BytesType,
			In:     7,
			ErrMsg: "unexpected type for bytes: int",
		},
		{
			Type:   PKIXBase64KeyType,
			In:     7,
			ErrMsg: "value must be a string; found int",
		},
		{
			Type:   PKIXBase64CertType,
			In:     7,
			ErrMsg: "value must be a string; found int",
		},
		{
			Type:   PKIXBase64CertPathType,
			In:     7,
			ErrMsg: "value must be a string; found int",
		},
		{
			Type:   COSEKeyType,
			In:     7,
			ErrMsg: "value must be a []byte or a string; found int",
		},
		{
			Type:   ThumbprintType,
			In:     7,
			ErrMsg: "value must be a swid.HashEntry or a string; found int",
		},
		{
			Type:   CertThumbprintType,
			In:     7,
			ErrMsg: "value must be a swid.HashEntry or a string; found int",
		},
		{
			Type:   CertPathThumbprintType,
			In:     7,
			ErrMsg: "value must be a swid.HashEntry or a string; found int",
		},
		{
			Type:   "random-key",
			In:     7,
			ErrMsg: "unexpected CryptoKey type: random-key",
		},
	} {
		_, err := NewCryptoKey(tv.In, tv.Type)
		assert.ErrorContains(t, err, tv.ErrMsg)
	}
}

type testCryptoKey [4]byte

func newTestCryptoKey(_ any) (*CryptoKey, error) {
	return &CryptoKey{&testCryptoKey{0x74, 0x64, 0x73, 0x74}}, nil
}

func (o testCryptoKey) PublicKey() (crypto.PublicKey, error) {
	return crypto.PublicKey(o[:]), nil
}

func (o testCryptoKey) Type() string {
	return "test-crypto-key"
}

func (o testCryptoKey) String() string {
	return "test"
}

func (o testCryptoKey) Valid() error {
	return nil
}

func Test_RegisterCryptoKey(t *testing.T) {
	err := RegisterCryptoKeyType(99998, newTestCryptoKey)
	require.NoError(t, err)

	key, err := newTestCryptoKey(nil)
	require.NoError(t, err)

	data, err := json.Marshal(key)
	require.NoError(t, err)
	assert.Equal(t, string(data), `{"type":"test-crypto-key","value":"test"}`)

	var out CryptoKey
	err = json.Unmarshal(data, &out)
	require.NoError(t, err)
	assert.EqualValues(t, key, &out)

	data, err = em.Marshal(key)
	require.NoError(t, err)
	assert.Equal(t, data, []byte{
		0xda, 0x0, 0x1, 0x86, 0x9e, // tag 99998
		0x44,                   // bstr(4)
		0x74, 0x64, 0x73, 0x74, // "test"
	})

	var out2 CryptoKey
	err = dm.Unmarshal(data, &out2)
	require.NoError(t, err)
	assert.Equal(t, key, &out2)
}
